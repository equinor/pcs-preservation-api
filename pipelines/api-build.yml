trigger:
  branches:
    include:
      - build-test

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-preservation-infra
    endpoint: 'Preservation - Frontend'

# Global variables for the pipeline
variables:
 - template: templates/variables/preservation-variables.yml@templates
 - template: templates/variables/procosys-global-variables.yml@templates

stages:
# common stage. Docker build, tag and push
- stage: common
  displayName: 'Common'
  variables:
    envName: 'common'
    envRg: '${{ variables.envRgName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    appServicePlan: '${{ variables.nonProdappServicePlanName }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'
    dockerfilePath: '/src/Equinor.Procosys.Preservation.WebApi/Dockerfile'
    repositoryName: 'api'

  jobs:
  - template: /templates/pipelines/dockerbuild.yml@templates
    parameters:
      deploymentName: 'docker_build_push'
      dependsOn: ''
      env: 'pcs-${{ variables.envName }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: ${{ variables.dockerfilePath }}
      repository: ${{ variables.repositoryName }}
      dockerRegistryServiceConnection: $(dockerRegistryServiceConnectionName)

# Dev deploy stage
- stage: dev
  displayName: 'Dev'
  variables:
    envName: 'dev'
    envRg: '${{ variables.envRgName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    appServicePlan: '${{ variables.nonProdappServicePlanName }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 
    repositoryName: 'api'

  jobs:
  - template: /templates/pipelines/webappcontainer.yml@templates
    parameters:
      dependsOn: '${{ variables.serviceConnection }}'
      deploymentName: 'Publish_container_to_webapp'
      serviceConnection: '${{ variables.serviceConnection }}'
      webApp: '${{ variables.apiWebAppName }}'
      envGroup: '${{ variables.envGroupName }}'
      envRg: '${{ variables.envRg }}'
      env: '${{ variables.envName }}'
      appServicePlan: '${{ variables.serviceConnection }}'
      containerRegistry: '${{ variables.containerRegistry }}'
      repository: '${{ variables.repositoryName }}'