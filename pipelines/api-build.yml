trigger:
  branches:
    include:
      - build-test

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-preservation-infra
    endpoint: 'Preservation - Frontend'

# Global variables for the pipeline
variables:
 - template: variables/preservation-variables.yml@templates
 - template: variables/procosys-global-variables.yml@templates

stages:
# common stage. Docker build, tag and push
- stage: common
  displayName: 'Common'
  variables:
    envName: 'common'
    envRg: '${{ variables.envRgName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    appServicePlan: '${{ variables.nonProdappServicePlanName }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'
    dockerfilePath: '/src/Equinor.Procosys.Preservation.WebApi/Dockerfile'
    repositoryName: 'api'

  jobs:
  - template: /pipelines/dockerbuild.yml@templates
    parameters:
        deploymentName: 'docker_build_push'
        dependsOn: ''
        envName: 'pcs-${{ variables.envName }}'
        dockerfilePath: ${{ variables.dockerfilePath }}
        repository: ${{ variables.repositoryName }}
        dockerRegistryServiceConnection: $(dockerRegistryServiceConnectionName)

# Dev deploy stage
- stage: dev
  displayName: 'Dev'
  variables:
    envName: 'dev'
    envRg: '${{ variables.envRgName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    appServicePlan: '${{ variables.nonProdappServicePlanName }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'
    dockerfilePath: '/src/Equinor.Procosys.Preservation.WebApi/Dockerfile'
    repositoryName: 'api'

  jobs:
  - template: /pipelines/dockerbuild.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'web app for containers'
      serviceConnection: ${{ variables.serviceConnection }}
      env: '${{ variables.envName }}'
      envRg: '${{ variables.envRg }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: '${{ variables.dockerfilePath }}'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'
      tag: ''